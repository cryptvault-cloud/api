// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/cryptvault-cloud/helper"
)

type Directions string

const (
	DirectionsWrite  Directions = "write"
	DirectionsRead   Directions = "read"
	DirectionsDelete Directions = "delete"
)

// IdentityValue Input value to add new IdentityValue
type IdentityValueInput struct {
	ValueID    string `json:"valueID"`
	IdentityID string `json:"identityID"`
	Passframe  string `json:"passframe"`
}

// GetValueID returns IdentityValueInput.ValueID, and is useful for accessing the field via an interface.
func (v *IdentityValueInput) GetValueID() string { return v.ValueID }

// GetIdentityID returns IdentityValueInput.IdentityID, and is useful for accessing the field via an interface.
func (v *IdentityValueInput) GetIdentityID() string { return v.IdentityID }

// GetPassframe returns IdentityValueInput.Passframe, and is useful for accessing the field via an interface.
func (v *IdentityValueInput) GetPassframe() string { return v.Passframe }

// IdentityValue Patch value all values are optional to update IdentityValue entities
type IdentityValuePatch struct {
	ValueID    *string `json:"valueID"`
	IdentityID *string `json:"identityID"`
	Passframe  *string `json:"passframe"`
}

// GetValueID returns IdentityValuePatch.ValueID, and is useful for accessing the field via an interface.
func (v *IdentityValuePatch) GetValueID() *string { return v.ValueID }

// GetIdentityID returns IdentityValuePatch.IdentityID, and is useful for accessing the field via an interface.
func (v *IdentityValuePatch) GetIdentityID() *string { return v.IdentityID }

// GetPassframe returns IdentityValuePatch.Passframe, and is useful for accessing the field via an interface.
func (v *IdentityValuePatch) GetPassframe() *string { return v.Passframe }

// Right Input value to add new Right
type RightInput struct {
	Target            RightTarget `json:"target"`
	Right             Directions  `json:"right"`
	RightValuePattern string      `json:"rightValuePattern"`
	IdentityID        string      `json:"identityID"`
}

// GetTarget returns RightInput.Target, and is useful for accessing the field via an interface.
func (v *RightInput) GetTarget() RightTarget { return v.Target }

// GetRight returns RightInput.Right, and is useful for accessing the field via an interface.
func (v *RightInput) GetRight() Directions { return v.Right }

// GetRightValuePattern returns RightInput.RightValuePattern, and is useful for accessing the field via an interface.
func (v *RightInput) GetRightValuePattern() string { return v.RightValuePattern }

// GetIdentityID returns RightInput.IdentityID, and is useful for accessing the field via an interface.
func (v *RightInput) GetIdentityID() string { return v.IdentityID }

type RightTarget string

const (
	RightTargetValues     RightTarget = "values"
	RightTargetSystem     RightTarget = "system"
	RightTargetIdentities RightTarget = "identities"
)

type ValueType string

const (
	ValueTypeString ValueType = "String"
	ValueTypeJson   ValueType = "JSON"
)

// __addIdentityInput is used internally by genqlient
type __addIdentityInput struct {
	Name                string                 `json:"name"`
	PublicKey           helper.Base64PublicPem `json:"publicKey"`
	CreatorVerification string                 `json:"creatorVerification"`
}

// GetName returns __addIdentityInput.Name, and is useful for accessing the field via an interface.
func (v *__addIdentityInput) GetName() string { return v.Name }

// GetPublicKey returns __addIdentityInput.PublicKey, and is useful for accessing the field via an interface.
func (v *__addIdentityInput) GetPublicKey() helper.Base64PublicPem { return v.PublicKey }

// GetCreatorVerification returns __addIdentityInput.CreatorVerification, and is useful for accessing the field via an interface.
func (v *__addIdentityInput) GetCreatorVerification() string { return v.CreatorVerification }

// __addIdentityValueInput is used internally by genqlient
type __addIdentityValueInput struct {
	Input []*IdentityValueInput `json:"input,omitempty"`
}

// GetInput returns __addIdentityValueInput.Input, and is useful for accessing the field via an interface.
func (v *__addIdentityValueInput) GetInput() []*IdentityValueInput { return v.Input }

// __addRightInput is used internally by genqlient
type __addRightInput struct {
	Input []*RightInput `json:"input,omitempty"`
}

// GetInput returns __addRightInput.Input, and is useful for accessing the field via an interface.
func (v *__addRightInput) GetInput() []*RightInput { return v.Input }

// __addValueInput is used internally by genqlient
type __addValueInput struct {
	Name      string    `json:"name"`
	ValueType ValueType `json:"valueType"`
}

// GetName returns __addValueInput.Name, and is useful for accessing the field via an interface.
func (v *__addValueInput) GetName() string { return v.Name }

// GetValueType returns __addValueInput.ValueType, and is useful for accessing the field via an interface.
func (v *__addValueInput) GetValueType() ValueType { return v.ValueType }

// __allRelatedValuesInput is used internally by genqlient
type __allRelatedValuesInput struct {
	Identity string `json:"identity"`
}

// GetIdentity returns __allRelatedValuesInput.Identity, and is useful for accessing the field via an interface.
func (v *__allRelatedValuesInput) GetIdentity() string { return v.Identity }

// __allRelatedValuesWithIdentityValuesInput is used internally by genqlient
type __allRelatedValuesWithIdentityValuesInput struct {
	Identity string `json:"identity"`
}

// GetIdentity returns __allRelatedValuesWithIdentityValuesInput.Identity, and is useful for accessing the field via an interface.
func (v *__allRelatedValuesWithIdentityValuesInput) GetIdentity() string { return v.Identity }

// __createNewVaultInput is used internally by genqlient
type __createNewVaultInput struct {
	Name              string                 `json:"name"`
	OperatorPublicKey helper.Base64PublicPem `json:"operatorPublicKey"`
	Token             string                 `json:"token"`
}

// GetName returns __createNewVaultInput.Name, and is useful for accessing the field via an interface.
func (v *__createNewVaultInput) GetName() string { return v.Name }

// GetOperatorPublicKey returns __createNewVaultInput.OperatorPublicKey, and is useful for accessing the field via an interface.
func (v *__createNewVaultInput) GetOperatorPublicKey() helper.Base64PublicPem {
	return v.OperatorPublicKey
}

// GetToken returns __createNewVaultInput.Token, and is useful for accessing the field via an interface.
func (v *__createNewVaultInput) GetToken() string { return v.Token }

// __deleteAllRightsFromIdentityInput is used internally by genqlient
type __deleteAllRightsFromIdentityInput struct {
	IdentityId string `json:"identityId"`
}

// GetIdentityId returns __deleteAllRightsFromIdentityInput.IdentityId, and is useful for accessing the field via an interface.
func (v *__deleteAllRightsFromIdentityInput) GetIdentityId() string { return v.IdentityId }

// __deleteIdentityInput is used internally by genqlient
type __deleteIdentityInput struct {
	Identityid string `json:"identityid"`
}

// GetIdentityid returns __deleteIdentityInput.Identityid, and is useful for accessing the field via an interface.
func (v *__deleteIdentityInput) GetIdentityid() string { return v.Identityid }

// __deleteIdentityValueInput is used internally by genqlient
type __deleteIdentityValueInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteIdentityValueInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteIdentityValueInput) GetId() string { return v.Id }

// __deleteRightInput is used internally by genqlient
type __deleteRightInput struct {
	RightId    string `json:"rightId"`
	IdentityId string `json:"identityId"`
}

// GetRightId returns __deleteRightInput.RightId, and is useful for accessing the field via an interface.
func (v *__deleteRightInput) GetRightId() string { return v.RightId }

// GetIdentityId returns __deleteRightInput.IdentityId, and is useful for accessing the field via an interface.
func (v *__deleteRightInput) GetIdentityId() string { return v.IdentityId }

// __deleteValueInput is used internally by genqlient
type __deleteValueInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteValueInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteValueInput) GetId() string { return v.Id }

// __deleteVaultInput is used internally by genqlient
type __deleteVaultInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteVaultInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteVaultInput) GetId() string { return v.Id }

// __getIdentityInput is used internally by genqlient
type __getIdentityInput struct {
	Id string `json:"id"`
}

// GetId returns __getIdentityInput.Id, and is useful for accessing the field via an interface.
func (v *__getIdentityInput) GetId() string { return v.Id }

// __getRelatedIdentiesInput is used internally by genqlient
type __getRelatedIdentiesInput struct {
	Value string `json:"value"`
}

// GetValue returns __getRelatedIdentiesInput.Value, and is useful for accessing the field via an interface.
func (v *__getRelatedIdentiesInput) GetValue() string { return v.Value }

// __getValueByNameInput is used internally by genqlient
type __getValueByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __getValueByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__getValueByNameInput) GetName() string { return v.Name }

// __getValueInput is used internally by genqlient
type __getValueInput struct {
	Id string `json:"id"`
}

// GetId returns __getValueInput.Id, and is useful for accessing the field via an interface.
func (v *__getValueInput) GetId() string { return v.Id }

// __getVaultInput is used internally by genqlient
type __getVaultInput struct {
	Id string `json:"id"`
}

// GetId returns __getVaultInput.Id, and is useful for accessing the field via an interface.
func (v *__getVaultInput) GetId() string { return v.Id }

// __removeIdentityValueInput is used internally by genqlient
type __removeIdentityValueInput struct {
	Id *string `json:"id"`
}

// GetId returns __removeIdentityValueInput.Id, and is useful for accessing the field via an interface.
func (v *__removeIdentityValueInput) GetId() *string { return v.Id }

// __updateIdentityInput is used internally by genqlient
type __updateIdentityInput struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns __updateIdentityInput.Id, and is useful for accessing the field via an interface.
func (v *__updateIdentityInput) GetId() string { return v.Id }

// GetName returns __updateIdentityInput.Name, and is useful for accessing the field via an interface.
func (v *__updateIdentityInput) GetName() string { return v.Name }

// __updateIdentityValueInput is used internally by genqlient
type __updateIdentityValueInput struct {
	Id    string              `json:"id"`
	Input *IdentityValuePatch `json:"input,omitempty"`
}

// GetId returns __updateIdentityValueInput.Id, and is useful for accessing the field via an interface.
func (v *__updateIdentityValueInput) GetId() string { return v.Id }

// GetInput returns __updateIdentityValueInput.Input, and is useful for accessing the field via an interface.
func (v *__updateIdentityValueInput) GetInput() *IdentityValuePatch { return v.Input }

// __updateValueInput is used internally by genqlient
type __updateValueInput struct {
	Id        string    `json:"id"`
	Key       string    `json:"key"`
	ValueType ValueType `json:"valueType"`
}

// GetId returns __updateValueInput.Id, and is useful for accessing the field via an interface.
func (v *__updateValueInput) GetId() string { return v.Id }

// GetKey returns __updateValueInput.Key, and is useful for accessing the field via an interface.
func (v *__updateValueInput) GetKey() string { return v.Key }

// GetValueType returns __updateValueInput.ValueType, and is useful for accessing the field via an interface.
func (v *__updateValueInput) GetValueType() ValueType { return v.ValueType }

// __updateVaultInput is used internally by genqlient
type __updateVaultInput struct {
	Name string `json:"name"`
}

// GetName returns __updateVaultInput.Name, and is useful for accessing the field via an interface.
func (v *__updateVaultInput) GetName() string { return v.Name }

// addIdentityAddIdentityAddIdentityPayload includes the requested fields of the GraphQL type AddIdentityPayload.
// The GraphQL type's documentation follows.
//
// AddIdentity result with filterable data and affected rows
type addIdentityAddIdentityAddIdentityPayload struct {
	Affected []*addIdentityAddIdentityAddIdentityPayloadAffectedIdentity `json:"affected"`
}

// GetAffected returns addIdentityAddIdentityAddIdentityPayload.Affected, and is useful for accessing the field via an interface.
func (v *addIdentityAddIdentityAddIdentityPayload) GetAffected() []*addIdentityAddIdentityAddIdentityPayloadAffectedIdentity {
	return v.Affected
}

// addIdentityAddIdentityAddIdentityPayloadAffectedIdentity includes the requested fields of the GraphQL type Identity.
type addIdentityAddIdentityAddIdentityPayloadAffectedIdentity struct {
	Id string `json:"id"`
}

// GetId returns addIdentityAddIdentityAddIdentityPayloadAffectedIdentity.Id, and is useful for accessing the field via an interface.
func (v *addIdentityAddIdentityAddIdentityPayloadAffectedIdentity) GetId() string { return v.Id }

// addIdentityResponse is returned by addIdentity on success.
type addIdentityResponse struct {
	// Add new Identity
	AddIdentity *addIdentityAddIdentityAddIdentityPayload `json:"addIdentity"`
}

// GetAddIdentity returns addIdentityResponse.AddIdentity, and is useful for accessing the field via an interface.
func (v *addIdentityResponse) GetAddIdentity() *addIdentityAddIdentityAddIdentityPayload {
	return v.AddIdentity
}

// addIdentityValueAddIdentityValueAddIdentityValuePayload includes the requested fields of the GraphQL type AddIdentityValuePayload.
// The GraphQL type's documentation follows.
//
// AddIdentityValue result with filterable data and affected rows
type addIdentityValueAddIdentityValueAddIdentityValuePayload struct {
	Affected []*addIdentityValueAddIdentityValueAddIdentityValuePayloadAffectedIdentityValue `json:"affected"`
}

// GetAffected returns addIdentityValueAddIdentityValueAddIdentityValuePayload.Affected, and is useful for accessing the field via an interface.
func (v *addIdentityValueAddIdentityValueAddIdentityValuePayload) GetAffected() []*addIdentityValueAddIdentityValueAddIdentityValuePayloadAffectedIdentityValue {
	return v.Affected
}

// addIdentityValueAddIdentityValueAddIdentityValuePayloadAffectedIdentityValue includes the requested fields of the GraphQL type IdentityValue.
type addIdentityValueAddIdentityValueAddIdentityValuePayloadAffectedIdentityValue struct {
	Id string `json:"id"`
}

// GetId returns addIdentityValueAddIdentityValueAddIdentityValuePayloadAffectedIdentityValue.Id, and is useful for accessing the field via an interface.
func (v *addIdentityValueAddIdentityValueAddIdentityValuePayloadAffectedIdentityValue) GetId() string {
	return v.Id
}

// addIdentityValueResponse is returned by addIdentityValue on success.
type addIdentityValueResponse struct {
	// Add new IdentityValue
	AddIdentityValue *addIdentityValueAddIdentityValueAddIdentityValuePayload `json:"addIdentityValue"`
}

// GetAddIdentityValue returns addIdentityValueResponse.AddIdentityValue, and is useful for accessing the field via an interface.
func (v *addIdentityValueResponse) GetAddIdentityValue() *addIdentityValueAddIdentityValueAddIdentityValuePayload {
	return v.AddIdentityValue
}

// addRightAddRightAddRightPayload includes the requested fields of the GraphQL type AddRightPayload.
// The GraphQL type's documentation follows.
//
// AddRight result with filterable data and affected rows
type addRightAddRightAddRightPayload struct {
	Affected []*addRightAddRightAddRightPayloadAffectedRight `json:"affected"`
}

// GetAffected returns addRightAddRightAddRightPayload.Affected, and is useful for accessing the field via an interface.
func (v *addRightAddRightAddRightPayload) GetAffected() []*addRightAddRightAddRightPayloadAffectedRight {
	return v.Affected
}

// addRightAddRightAddRightPayloadAffectedRight includes the requested fields of the GraphQL type Right.
type addRightAddRightAddRightPayloadAffectedRight struct {
	Id string `json:"id"`
}

// GetId returns addRightAddRightAddRightPayloadAffectedRight.Id, and is useful for accessing the field via an interface.
func (v *addRightAddRightAddRightPayloadAffectedRight) GetId() string { return v.Id }

// addRightResponse is returned by addRight on success.
type addRightResponse struct {
	// Add new Right
	AddRight *addRightAddRightAddRightPayload `json:"addRight"`
}

// GetAddRight returns addRightResponse.AddRight, and is useful for accessing the field via an interface.
func (v *addRightResponse) GetAddRight() *addRightAddRightAddRightPayload { return v.AddRight }

// addValueAddValueAddValuePayload includes the requested fields of the GraphQL type AddValuePayload.
// The GraphQL type's documentation follows.
//
// AddValue result with filterable data and affected rows
type addValueAddValueAddValuePayload struct {
	Affected []*addValueAddValueAddValuePayloadAffectedValue `json:"affected"`
}

// GetAffected returns addValueAddValueAddValuePayload.Affected, and is useful for accessing the field via an interface.
func (v *addValueAddValueAddValuePayload) GetAffected() []*addValueAddValueAddValuePayloadAffectedValue {
	return v.Affected
}

// addValueAddValueAddValuePayloadAffectedValue includes the requested fields of the GraphQL type Value.
type addValueAddValueAddValuePayloadAffectedValue struct {
	Id string `json:"id"`
}

// GetId returns addValueAddValueAddValuePayloadAffectedValue.Id, and is useful for accessing the field via an interface.
func (v *addValueAddValueAddValuePayloadAffectedValue) GetId() string { return v.Id }

// addValueResponse is returned by addValue on success.
type addValueResponse struct {
	// Add new Value
	AddValue *addValueAddValueAddValuePayload `json:"addValue"`
}

// GetAddValue returns addValueResponse.AddValue, and is useful for accessing the field via an interface.
func (v *addValueResponse) GetAddValue() *addValueAddValueAddValuePayload { return v.AddValue }

// allIdentitiesQueryIdentityIdentityQueryResult includes the requested fields of the GraphQL type IdentityQueryResult.
// The GraphQL type's documentation follows.
//
// Identity result
type allIdentitiesQueryIdentityIdentityQueryResult struct {
	Data []*allIdentitiesQueryIdentityIdentityQueryResultDataIdentity `json:"data"`
}

// GetData returns allIdentitiesQueryIdentityIdentityQueryResult.Data, and is useful for accessing the field via an interface.
func (v *allIdentitiesQueryIdentityIdentityQueryResult) GetData() []*allIdentitiesQueryIdentityIdentityQueryResultDataIdentity {
	return v.Data
}

// allIdentitiesQueryIdentityIdentityQueryResultDataIdentity includes the requested fields of the GraphQL type Identity.
type allIdentitiesQueryIdentityIdentityQueryResultDataIdentity struct {
	Name   *string                                                                 `json:"name"`
	Rights []*allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight `json:"rights"`
}

// GetName returns allIdentitiesQueryIdentityIdentityQueryResultDataIdentity.Name, and is useful for accessing the field via an interface.
func (v *allIdentitiesQueryIdentityIdentityQueryResultDataIdentity) GetName() *string { return v.Name }

// GetRights returns allIdentitiesQueryIdentityIdentityQueryResultDataIdentity.Rights, and is useful for accessing the field via an interface.
func (v *allIdentitiesQueryIdentityIdentityQueryResultDataIdentity) GetRights() []*allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight {
	return v.Rights
}

// allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight includes the requested fields of the GraphQL type Right.
type allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight struct {
	Target            RightTarget `json:"target"`
	Right             Directions  `json:"right"`
	RightValuePattern string      `json:"rightValuePattern"`
}

// GetTarget returns allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight.Target, and is useful for accessing the field via an interface.
func (v *allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight) GetTarget() RightTarget {
	return v.Target
}

// GetRight returns allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight.Right, and is useful for accessing the field via an interface.
func (v *allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight) GetRight() Directions {
	return v.Right
}

// GetRightValuePattern returns allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight.RightValuePattern, and is useful for accessing the field via an interface.
func (v *allIdentitiesQueryIdentityIdentityQueryResultDataIdentityRightsRight) GetRightValuePattern() string {
	return v.RightValuePattern
}

// allIdentitiesResponse is returned by allIdentities on success.
type allIdentitiesResponse struct {
	// return a list of  Identity filterable, pageination, orderbale, groupable ...
	QueryIdentity *allIdentitiesQueryIdentityIdentityQueryResult `json:"queryIdentity"`
}

// GetQueryIdentity returns allIdentitiesResponse.QueryIdentity, and is useful for accessing the field via an interface.
func (v *allIdentitiesResponse) GetQueryIdentity() *allIdentitiesQueryIdentityIdentityQueryResult {
	return v.QueryIdentity
}

// allRelatedValuesAllRelatedValuesValue includes the requested fields of the GraphQL type Value.
type allRelatedValuesAllRelatedValuesValue struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns allRelatedValuesAllRelatedValuesValue.Id, and is useful for accessing the field via an interface.
func (v *allRelatedValuesAllRelatedValuesValue) GetId() string { return v.Id }

// GetName returns allRelatedValuesAllRelatedValuesValue.Name, and is useful for accessing the field via an interface.
func (v *allRelatedValuesAllRelatedValuesValue) GetName() string { return v.Name }

// allRelatedValuesResponse is returned by allRelatedValues on success.
type allRelatedValuesResponse struct {
	AllRelatedValues []*allRelatedValuesAllRelatedValuesValue `json:"allRelatedValues"`
}

// GetAllRelatedValues returns allRelatedValuesResponse.AllRelatedValues, and is useful for accessing the field via an interface.
func (v *allRelatedValuesResponse) GetAllRelatedValues() []*allRelatedValuesAllRelatedValuesValue {
	return v.AllRelatedValues
}

// allRelatedValuesWithIdentityValuesAllRelatedValuesValue includes the requested fields of the GraphQL type Value.
type allRelatedValuesWithIdentityValuesAllRelatedValuesValue struct {
	Id    string                                                                       `json:"id"`
	Name  string                                                                       `json:"name"`
	Value []*allRelatedValuesWithIdentityValuesAllRelatedValuesValueValueIdentityValue `json:"value"`
}

// GetId returns allRelatedValuesWithIdentityValuesAllRelatedValuesValue.Id, and is useful for accessing the field via an interface.
func (v *allRelatedValuesWithIdentityValuesAllRelatedValuesValue) GetId() string { return v.Id }

// GetName returns allRelatedValuesWithIdentityValuesAllRelatedValuesValue.Name, and is useful for accessing the field via an interface.
func (v *allRelatedValuesWithIdentityValuesAllRelatedValuesValue) GetName() string { return v.Name }

// GetValue returns allRelatedValuesWithIdentityValuesAllRelatedValuesValue.Value, and is useful for accessing the field via an interface.
func (v *allRelatedValuesWithIdentityValuesAllRelatedValuesValue) GetValue() []*allRelatedValuesWithIdentityValuesAllRelatedValuesValueValueIdentityValue {
	return v.Value
}

// allRelatedValuesWithIdentityValuesAllRelatedValuesValueValueIdentityValue includes the requested fields of the GraphQL type IdentityValue.
type allRelatedValuesWithIdentityValuesAllRelatedValuesValueValueIdentityValue struct {
	Id         string `json:"id"`
	IdentityID string `json:"identityID"`
}

// GetId returns allRelatedValuesWithIdentityValuesAllRelatedValuesValueValueIdentityValue.Id, and is useful for accessing the field via an interface.
func (v *allRelatedValuesWithIdentityValuesAllRelatedValuesValueValueIdentityValue) GetId() string {
	return v.Id
}

// GetIdentityID returns allRelatedValuesWithIdentityValuesAllRelatedValuesValueValueIdentityValue.IdentityID, and is useful for accessing the field via an interface.
func (v *allRelatedValuesWithIdentityValuesAllRelatedValuesValueValueIdentityValue) GetIdentityID() string {
	return v.IdentityID
}

// allRelatedValuesWithIdentityValuesResponse is returned by allRelatedValuesWithIdentityValues on success.
type allRelatedValuesWithIdentityValuesResponse struct {
	AllRelatedValues []*allRelatedValuesWithIdentityValuesAllRelatedValuesValue `json:"allRelatedValues"`
}

// GetAllRelatedValues returns allRelatedValuesWithIdentityValuesResponse.AllRelatedValues, and is useful for accessing the field via an interface.
func (v *allRelatedValuesWithIdentityValuesResponse) GetAllRelatedValues() []*allRelatedValuesWithIdentityValuesAllRelatedValuesValue {
	return v.AllRelatedValues
}

// createNewVaultResponse is returned by createNewVault on success.
type createNewVaultResponse struct {
	// Create a new Vault with first operator and return vault id
	CreateVault string `json:"createVault"`
}

// GetCreateVault returns createNewVaultResponse.CreateVault, and is useful for accessing the field via an interface.
func (v *createNewVaultResponse) GetCreateVault() string { return v.CreateVault }

// deleteAllRightsFromIdentityDeleteRightDeleteRightPayload includes the requested fields of the GraphQL type DeleteRightPayload.
// The GraphQL type's documentation follows.
//
// DeleteRight result with filterable data and count of affected entries
type deleteAllRightsFromIdentityDeleteRightDeleteRightPayload struct {
	// Count of deleted Right entities
	Count int `json:"count"`
}

// GetCount returns deleteAllRightsFromIdentityDeleteRightDeleteRightPayload.Count, and is useful for accessing the field via an interface.
func (v *deleteAllRightsFromIdentityDeleteRightDeleteRightPayload) GetCount() int { return v.Count }

// deleteAllRightsFromIdentityResponse is returned by deleteAllRightsFromIdentity on success.
type deleteAllRightsFromIdentityResponse struct {
	// delete Right filtered by selection and delete all matched values
	DeleteRight *deleteAllRightsFromIdentityDeleteRightDeleteRightPayload `json:"deleteRight"`
}

// GetDeleteRight returns deleteAllRightsFromIdentityResponse.DeleteRight, and is useful for accessing the field via an interface.
func (v *deleteAllRightsFromIdentityResponse) GetDeleteRight() *deleteAllRightsFromIdentityDeleteRightDeleteRightPayload {
	return v.DeleteRight
}

// deleteIdentityDeleteIdentityDeleteIdentityPayload includes the requested fields of the GraphQL type DeleteIdentityPayload.
// The GraphQL type's documentation follows.
//
// DeleteIdentity result with filterable data and count of affected entries
type deleteIdentityDeleteIdentityDeleteIdentityPayload struct {
	// Count of deleted Identity entities
	Count int `json:"count"`
}

// GetCount returns deleteIdentityDeleteIdentityDeleteIdentityPayload.Count, and is useful for accessing the field via an interface.
func (v *deleteIdentityDeleteIdentityDeleteIdentityPayload) GetCount() int { return v.Count }

// deleteIdentityResponse is returned by deleteIdentity on success.
type deleteIdentityResponse struct {
	// delete Identity filtered by selection and delete all matched values
	DeleteIdentity *deleteIdentityDeleteIdentityDeleteIdentityPayload `json:"deleteIdentity"`
}

// GetDeleteIdentity returns deleteIdentityResponse.DeleteIdentity, and is useful for accessing the field via an interface.
func (v *deleteIdentityResponse) GetDeleteIdentity() *deleteIdentityDeleteIdentityDeleteIdentityPayload {
	return v.DeleteIdentity
}

// deleteIdentityValueDeleteIdentityValueDeleteIdentityValuePayload includes the requested fields of the GraphQL type DeleteIdentityValuePayload.
// The GraphQL type's documentation follows.
//
// DeleteIdentityValue result with filterable data and count of affected entries
type deleteIdentityValueDeleteIdentityValueDeleteIdentityValuePayload struct {
	// Count of deleted IdentityValue entities
	Count int `json:"count"`
}

// GetCount returns deleteIdentityValueDeleteIdentityValueDeleteIdentityValuePayload.Count, and is useful for accessing the field via an interface.
func (v *deleteIdentityValueDeleteIdentityValueDeleteIdentityValuePayload) GetCount() int {
	return v.Count
}

// deleteIdentityValueResponse is returned by deleteIdentityValue on success.
type deleteIdentityValueResponse struct {
	// delete IdentityValue filtered by selection and delete all matched values
	DeleteIdentityValue *deleteIdentityValueDeleteIdentityValueDeleteIdentityValuePayload `json:"deleteIdentityValue"`
}

// GetDeleteIdentityValue returns deleteIdentityValueResponse.DeleteIdentityValue, and is useful for accessing the field via an interface.
func (v *deleteIdentityValueResponse) GetDeleteIdentityValue() *deleteIdentityValueDeleteIdentityValueDeleteIdentityValuePayload {
	return v.DeleteIdentityValue
}

// deleteRightDeleteRightDeleteRightPayload includes the requested fields of the GraphQL type DeleteRightPayload.
// The GraphQL type's documentation follows.
//
// DeleteRight result with filterable data and count of affected entries
type deleteRightDeleteRightDeleteRightPayload struct {
	// Count of deleted Right entities
	Count int `json:"count"`
}

// GetCount returns deleteRightDeleteRightDeleteRightPayload.Count, and is useful for accessing the field via an interface.
func (v *deleteRightDeleteRightDeleteRightPayload) GetCount() int { return v.Count }

// deleteRightResponse is returned by deleteRight on success.
type deleteRightResponse struct {
	// delete Right filtered by selection and delete all matched values
	DeleteRight *deleteRightDeleteRightDeleteRightPayload `json:"deleteRight"`
}

// GetDeleteRight returns deleteRightResponse.DeleteRight, and is useful for accessing the field via an interface.
func (v *deleteRightResponse) GetDeleteRight() *deleteRightDeleteRightDeleteRightPayload {
	return v.DeleteRight
}

// deleteValueDeleteValueDeleteValuePayload includes the requested fields of the GraphQL type DeleteValuePayload.
// The GraphQL type's documentation follows.
//
// DeleteValue result with filterable data and count of affected entries
type deleteValueDeleteValueDeleteValuePayload struct {
	// Count of deleted Value entities
	Count int `json:"count"`
}

// GetCount returns deleteValueDeleteValueDeleteValuePayload.Count, and is useful for accessing the field via an interface.
func (v *deleteValueDeleteValueDeleteValuePayload) GetCount() int { return v.Count }

// deleteValueResponse is returned by deleteValue on success.
type deleteValueResponse struct {
	// delete Value filtered by selection and delete all matched values
	DeleteValue *deleteValueDeleteValueDeleteValuePayload `json:"deleteValue"`
}

// GetDeleteValue returns deleteValueResponse.DeleteValue, and is useful for accessing the field via an interface.
func (v *deleteValueResponse) GetDeleteValue() *deleteValueDeleteValueDeleteValuePayload {
	return v.DeleteValue
}

// deleteVaultDeleteVaultDeleteVaultPayload includes the requested fields of the GraphQL type DeleteVaultPayload.
// The GraphQL type's documentation follows.
//
// DeleteVault result with filterable data and count of affected entries
type deleteVaultDeleteVaultDeleteVaultPayload struct {
	// Count of deleted Vault entities
	Count int `json:"count"`
}

// GetCount returns deleteVaultDeleteVaultDeleteVaultPayload.Count, and is useful for accessing the field via an interface.
func (v *deleteVaultDeleteVaultDeleteVaultPayload) GetCount() int { return v.Count }

// deleteVaultResponse is returned by deleteVault on success.
type deleteVaultResponse struct {
	// delete Vault filtered by selection and delete all matched values
	DeleteVault *deleteVaultDeleteVaultDeleteVaultPayload `json:"deleteVault"`
}

// GetDeleteVault returns deleteVaultResponse.DeleteVault, and is useful for accessing the field via an interface.
func (v *deleteVaultResponse) GetDeleteVault() *deleteVaultDeleteVaultDeleteVaultPayload {
	return v.DeleteVault
}

// getIdentityGetIdentity includes the requested fields of the GraphQL type Identity.
type getIdentityGetIdentity struct {
	Id        string                               `json:"id"`
	Name      *string                              `json:"name"`
	PublicKey helper.Base64PublicPem               `json:"publicKey"`
	VaultID   string                               `json:"vaultID"`
	CreatedAt *time.Time                           `json:"createdAt"`
	UpdatedAt *time.Time                           `json:"updatedAt"`
	Rights    []*getIdentityGetIdentityRightsRight `json:"rights"`
}

// GetId returns getIdentityGetIdentity.Id, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentity) GetId() string { return v.Id }

// GetName returns getIdentityGetIdentity.Name, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentity) GetName() *string { return v.Name }

// GetPublicKey returns getIdentityGetIdentity.PublicKey, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentity) GetPublicKey() helper.Base64PublicPem { return v.PublicKey }

// GetVaultID returns getIdentityGetIdentity.VaultID, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentity) GetVaultID() string { return v.VaultID }

// GetCreatedAt returns getIdentityGetIdentity.CreatedAt, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentity) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns getIdentityGetIdentity.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentity) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetRights returns getIdentityGetIdentity.Rights, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentity) GetRights() []*getIdentityGetIdentityRightsRight { return v.Rights }

// getIdentityGetIdentityRightsRight includes the requested fields of the GraphQL type Right.
type getIdentityGetIdentityRightsRight struct {
	Id                string      `json:"id"`
	Right             Directions  `json:"right"`
	Target            RightTarget `json:"target"`
	RightValuePattern string      `json:"rightValuePattern"`
}

// GetId returns getIdentityGetIdentityRightsRight.Id, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentityRightsRight) GetId() string { return v.Id }

// GetRight returns getIdentityGetIdentityRightsRight.Right, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentityRightsRight) GetRight() Directions { return v.Right }

// GetTarget returns getIdentityGetIdentityRightsRight.Target, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentityRightsRight) GetTarget() RightTarget { return v.Target }

// GetRightValuePattern returns getIdentityGetIdentityRightsRight.RightValuePattern, and is useful for accessing the field via an interface.
func (v *getIdentityGetIdentityRightsRight) GetRightValuePattern() string { return v.RightValuePattern }

// getIdentityResponse is returned by getIdentity on success.
type getIdentityResponse struct {
	// return one Identity selected by PrimaryKey(s)
	GetIdentity *getIdentityGetIdentity `json:"getIdentity"`
}

// GetGetIdentity returns getIdentityResponse.GetIdentity, and is useful for accessing the field via an interface.
func (v *getIdentityResponse) GetGetIdentity() *getIdentityGetIdentity { return v.GetIdentity }

// getRelatedIdentiesIdentitiesWithValueAccessIdentity includes the requested fields of the GraphQL type Identity.
type getRelatedIdentiesIdentitiesWithValueAccessIdentity struct {
	Id                  string                 `json:"id"`
	Name                *string                `json:"name"`
	PublicKey           helper.Base64PublicPem `json:"publicKey"`
	CreatorVerification string                 `json:"creatorVerification"`
	IsOperator          bool                   `json:"isOperator"`
}

// GetId returns getRelatedIdentiesIdentitiesWithValueAccessIdentity.Id, and is useful for accessing the field via an interface.
func (v *getRelatedIdentiesIdentitiesWithValueAccessIdentity) GetId() string { return v.Id }

// GetName returns getRelatedIdentiesIdentitiesWithValueAccessIdentity.Name, and is useful for accessing the field via an interface.
func (v *getRelatedIdentiesIdentitiesWithValueAccessIdentity) GetName() *string { return v.Name }

// GetPublicKey returns getRelatedIdentiesIdentitiesWithValueAccessIdentity.PublicKey, and is useful for accessing the field via an interface.
func (v *getRelatedIdentiesIdentitiesWithValueAccessIdentity) GetPublicKey() helper.Base64PublicPem {
	return v.PublicKey
}

// GetCreatorVerification returns getRelatedIdentiesIdentitiesWithValueAccessIdentity.CreatorVerification, and is useful for accessing the field via an interface.
func (v *getRelatedIdentiesIdentitiesWithValueAccessIdentity) GetCreatorVerification() string {
	return v.CreatorVerification
}

// GetIsOperator returns getRelatedIdentiesIdentitiesWithValueAccessIdentity.IsOperator, and is useful for accessing the field via an interface.
func (v *getRelatedIdentiesIdentitiesWithValueAccessIdentity) GetIsOperator() bool {
	return v.IsOperator
}

// getRelatedIdentiesResponse is returned by getRelatedIdenties on success.
type getRelatedIdentiesResponse struct {
	IdentitiesWithValueAccess []*getRelatedIdentiesIdentitiesWithValueAccessIdentity `json:"identitiesWithValueAccess"`
}

// GetIdentitiesWithValueAccess returns getRelatedIdentiesResponse.IdentitiesWithValueAccess, and is useful for accessing the field via an interface.
func (v *getRelatedIdentiesResponse) GetIdentitiesWithValueAccess() []*getRelatedIdentiesIdentitiesWithValueAccessIdentity {
	return v.IdentitiesWithValueAccess
}

// getValueByNameQueryValueValueQueryResult includes the requested fields of the GraphQL type ValueQueryResult.
// The GraphQL type's documentation follows.
//
// Value result
type getValueByNameQueryValueValueQueryResult struct {
	Data []*getValueByNameQueryValueValueQueryResultDataValue `json:"data"`
}

// GetData returns getValueByNameQueryValueValueQueryResult.Data, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResult) GetData() []*getValueByNameQueryValueValueQueryResultDataValue {
	return v.Data
}

// getValueByNameQueryValueValueQueryResultDataValue includes the requested fields of the GraphQL type Value.
type getValueByNameQueryValueValueQueryResultDataValue struct {
	Name      string                                                                 `json:"name"`
	Type      ValueType                                                              `json:"type"`
	Id        string                                                                 `json:"id"`
	CreatedAt *time.Time                                                             `json:"createdAt"`
	UpdatedAt *time.Time                                                             `json:"updatedAt"`
	Value     []*getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue `json:"value"`
}

// GetName returns getValueByNameQueryValueValueQueryResultDataValue.Name, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValue) GetName() string { return v.Name }

// GetType returns getValueByNameQueryValueValueQueryResultDataValue.Type, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValue) GetType() ValueType { return v.Type }

// GetId returns getValueByNameQueryValueValueQueryResultDataValue.Id, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValue) GetId() string { return v.Id }

// GetCreatedAt returns getValueByNameQueryValueValueQueryResultDataValue.CreatedAt, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValue) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns getValueByNameQueryValueValueQueryResultDataValue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValue) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// GetValue returns getValueByNameQueryValueValueQueryResultDataValue.Value, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValue) GetValue() []*getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue {
	return v.Value
}

// getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue includes the requested fields of the GraphQL type IdentityValue.
type getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue struct {
	Id         string                                                                       `json:"id"`
	IdentityID string                                                                       `json:"identityID"`
	Identity   *getValueByNameQueryValueValueQueryResultDataValueValueIdentityValueIdentity `json:"identity"`
	Passframe  string                                                                       `json:"passframe"`
}

// GetId returns getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue.Id, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue) GetId() string {
	return v.Id
}

// GetIdentityID returns getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue.IdentityID, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue) GetIdentityID() string {
	return v.IdentityID
}

// GetIdentity returns getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue.Identity, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue) GetIdentity() *getValueByNameQueryValueValueQueryResultDataValueValueIdentityValueIdentity {
	return v.Identity
}

// GetPassframe returns getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue.Passframe, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValueValueIdentityValue) GetPassframe() string {
	return v.Passframe
}

// getValueByNameQueryValueValueQueryResultDataValueValueIdentityValueIdentity includes the requested fields of the GraphQL type Identity.
type getValueByNameQueryValueValueQueryResultDataValueValueIdentityValueIdentity struct {
	PublicKey helper.Base64PublicPem `json:"publicKey"`
}

// GetPublicKey returns getValueByNameQueryValueValueQueryResultDataValueValueIdentityValueIdentity.PublicKey, and is useful for accessing the field via an interface.
func (v *getValueByNameQueryValueValueQueryResultDataValueValueIdentityValueIdentity) GetPublicKey() helper.Base64PublicPem {
	return v.PublicKey
}

// getValueByNameResponse is returned by getValueByName on success.
type getValueByNameResponse struct {
	// return a list of  Value filterable, pageination, orderbale, groupable ...
	QueryValue *getValueByNameQueryValueValueQueryResult `json:"queryValue"`
}

// GetQueryValue returns getValueByNameResponse.QueryValue, and is useful for accessing the field via an interface.
func (v *getValueByNameResponse) GetQueryValue() *getValueByNameQueryValueValueQueryResult {
	return v.QueryValue
}

// getValueGetValue includes the requested fields of the GraphQL type Value.
type getValueGetValue struct {
	Name      string                                `json:"name"`
	Type      ValueType                             `json:"type"`
	Id        string                                `json:"id"`
	CreatedAt *time.Time                            `json:"createdAt"`
	UpdatedAt *time.Time                            `json:"updatedAt"`
	Value     []*getValueGetValueValueIdentityValue `json:"value"`
}

// GetName returns getValueGetValue.Name, and is useful for accessing the field via an interface.
func (v *getValueGetValue) GetName() string { return v.Name }

// GetType returns getValueGetValue.Type, and is useful for accessing the field via an interface.
func (v *getValueGetValue) GetType() ValueType { return v.Type }

// GetId returns getValueGetValue.Id, and is useful for accessing the field via an interface.
func (v *getValueGetValue) GetId() string { return v.Id }

// GetCreatedAt returns getValueGetValue.CreatedAt, and is useful for accessing the field via an interface.
func (v *getValueGetValue) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns getValueGetValue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getValueGetValue) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetValue returns getValueGetValue.Value, and is useful for accessing the field via an interface.
func (v *getValueGetValue) GetValue() []*getValueGetValueValueIdentityValue { return v.Value }

// getValueGetValueValueIdentityValue includes the requested fields of the GraphQL type IdentityValue.
type getValueGetValueValueIdentityValue struct {
	Id         string                                      `json:"id"`
	IdentityID string                                      `json:"identityID"`
	Identity   *getValueGetValueValueIdentityValueIdentity `json:"identity"`
	Passframe  string                                      `json:"passframe"`
}

// GetId returns getValueGetValueValueIdentityValue.Id, and is useful for accessing the field via an interface.
func (v *getValueGetValueValueIdentityValue) GetId() string { return v.Id }

// GetIdentityID returns getValueGetValueValueIdentityValue.IdentityID, and is useful for accessing the field via an interface.
func (v *getValueGetValueValueIdentityValue) GetIdentityID() string { return v.IdentityID }

// GetIdentity returns getValueGetValueValueIdentityValue.Identity, and is useful for accessing the field via an interface.
func (v *getValueGetValueValueIdentityValue) GetIdentity() *getValueGetValueValueIdentityValueIdentity {
	return v.Identity
}

// GetPassframe returns getValueGetValueValueIdentityValue.Passframe, and is useful for accessing the field via an interface.
func (v *getValueGetValueValueIdentityValue) GetPassframe() string { return v.Passframe }

// getValueGetValueValueIdentityValueIdentity includes the requested fields of the GraphQL type Identity.
type getValueGetValueValueIdentityValueIdentity struct {
	PublicKey helper.Base64PublicPem `json:"publicKey"`
}

// GetPublicKey returns getValueGetValueValueIdentityValueIdentity.PublicKey, and is useful for accessing the field via an interface.
func (v *getValueGetValueValueIdentityValueIdentity) GetPublicKey() helper.Base64PublicPem {
	return v.PublicKey
}

// getValueResponse is returned by getValue on success.
type getValueResponse struct {
	// return one Value selected by PrimaryKey(s)
	GetValue *getValueGetValue `json:"getValue"`
}

// GetGetValue returns getValueResponse.GetValue, and is useful for accessing the field via an interface.
func (v *getValueResponse) GetGetValue() *getValueGetValue { return v.GetValue }

// getVaultGetVault includes the requested fields of the GraphQL type Vault.
type getVaultGetVault struct {
	Id        string     `json:"id"`
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns getVaultGetVault.Id, and is useful for accessing the field via an interface.
func (v *getVaultGetVault) GetId() string { return v.Id }

// GetName returns getVaultGetVault.Name, and is useful for accessing the field via an interface.
func (v *getVaultGetVault) GetName() string { return v.Name }

// GetUpdatedAt returns getVaultGetVault.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getVaultGetVault) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// getVaultResponse is returned by getVault on success.
type getVaultResponse struct {
	// return one Vault selected by PrimaryKey(s)
	GetVault *getVaultGetVault `json:"getVault"`
}

// GetGetVault returns getVaultResponse.GetVault, and is useful for accessing the field via an interface.
func (v *getVaultResponse) GetGetVault() *getVaultGetVault { return v.GetVault }

// removeIdentityValueDeleteIdentityValueDeleteIdentityValuePayload includes the requested fields of the GraphQL type DeleteIdentityValuePayload.
// The GraphQL type's documentation follows.
//
// DeleteIdentityValue result with filterable data and count of affected entries
type removeIdentityValueDeleteIdentityValueDeleteIdentityValuePayload struct {
	// Count of deleted IdentityValue entities
	Count int `json:"count"`
}

// GetCount returns removeIdentityValueDeleteIdentityValueDeleteIdentityValuePayload.Count, and is useful for accessing the field via an interface.
func (v *removeIdentityValueDeleteIdentityValueDeleteIdentityValuePayload) GetCount() int {
	return v.Count
}

// removeIdentityValueResponse is returned by removeIdentityValue on success.
type removeIdentityValueResponse struct {
	// delete IdentityValue filtered by selection and delete all matched values
	DeleteIdentityValue *removeIdentityValueDeleteIdentityValueDeleteIdentityValuePayload `json:"deleteIdentityValue"`
}

// GetDeleteIdentityValue returns removeIdentityValueResponse.DeleteIdentityValue, and is useful for accessing the field via an interface.
func (v *removeIdentityValueResponse) GetDeleteIdentityValue() *removeIdentityValueDeleteIdentityValueDeleteIdentityValuePayload {
	return v.DeleteIdentityValue
}

// updateIdentityResponse is returned by updateIdentity on success.
type updateIdentityResponse struct {
	// update Identity filtered by selection and update all matched values
	UpdateIdentity *updateIdentityUpdateIdentityUpdateIdentityPayload `json:"updateIdentity"`
}

// GetUpdateIdentity returns updateIdentityResponse.UpdateIdentity, and is useful for accessing the field via an interface.
func (v *updateIdentityResponse) GetUpdateIdentity() *updateIdentityUpdateIdentityUpdateIdentityPayload {
	return v.UpdateIdentity
}

// updateIdentityUpdateIdentityUpdateIdentityPayload includes the requested fields of the GraphQL type UpdateIdentityPayload.
// The GraphQL type's documentation follows.
//
// UpdateIdentity result with filterable data and affected rows
type updateIdentityUpdateIdentityUpdateIdentityPayload struct {
	Affected []*updateIdentityUpdateIdentityUpdateIdentityPayloadAffectedIdentity `json:"affected"`
}

// GetAffected returns updateIdentityUpdateIdentityUpdateIdentityPayload.Affected, and is useful for accessing the field via an interface.
func (v *updateIdentityUpdateIdentityUpdateIdentityPayload) GetAffected() []*updateIdentityUpdateIdentityUpdateIdentityPayloadAffectedIdentity {
	return v.Affected
}

// updateIdentityUpdateIdentityUpdateIdentityPayloadAffectedIdentity includes the requested fields of the GraphQL type Identity.
type updateIdentityUpdateIdentityUpdateIdentityPayloadAffectedIdentity struct {
	Id        string                 `json:"id"`
	PublicKey helper.Base64PublicPem `json:"publicKey"`
}

// GetId returns updateIdentityUpdateIdentityUpdateIdentityPayloadAffectedIdentity.Id, and is useful for accessing the field via an interface.
func (v *updateIdentityUpdateIdentityUpdateIdentityPayloadAffectedIdentity) GetId() string {
	return v.Id
}

// GetPublicKey returns updateIdentityUpdateIdentityUpdateIdentityPayloadAffectedIdentity.PublicKey, and is useful for accessing the field via an interface.
func (v *updateIdentityUpdateIdentityUpdateIdentityPayloadAffectedIdentity) GetPublicKey() helper.Base64PublicPem {
	return v.PublicKey
}

// updateIdentityValueResponse is returned by updateIdentityValue on success.
type updateIdentityValueResponse struct {
	// update IdentityValue filtered by selection and update all matched values
	UpdateIdentityValue *updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayload `json:"updateIdentityValue"`
}

// GetUpdateIdentityValue returns updateIdentityValueResponse.UpdateIdentityValue, and is useful for accessing the field via an interface.
func (v *updateIdentityValueResponse) GetUpdateIdentityValue() *updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayload {
	return v.UpdateIdentityValue
}

// updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayload includes the requested fields of the GraphQL type UpdateIdentityValuePayload.
// The GraphQL type's documentation follows.
//
// UpdateIdentityValue result with filterable data and affected rows
type updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayload struct {
	Affected []*updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayloadAffectedIdentityValue `json:"affected"`
}

// GetAffected returns updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayload.Affected, and is useful for accessing the field via an interface.
func (v *updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayload) GetAffected() []*updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayloadAffectedIdentityValue {
	return v.Affected
}

// updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayloadAffectedIdentityValue includes the requested fields of the GraphQL type IdentityValue.
type updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayloadAffectedIdentityValue struct {
	Id string `json:"id"`
}

// GetId returns updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayloadAffectedIdentityValue.Id, and is useful for accessing the field via an interface.
func (v *updateIdentityValueUpdateIdentityValueUpdateIdentityValuePayloadAffectedIdentityValue) GetId() string {
	return v.Id
}

// updateValueResponse is returned by updateValue on success.
type updateValueResponse struct {
	// update Value filtered by selection and update all matched values
	UpdateValue *updateValueUpdateValueUpdateValuePayload `json:"updateValue"`
}

// GetUpdateValue returns updateValueResponse.UpdateValue, and is useful for accessing the field via an interface.
func (v *updateValueResponse) GetUpdateValue() *updateValueUpdateValueUpdateValuePayload {
	return v.UpdateValue
}

// updateValueUpdateValueUpdateValuePayload includes the requested fields of the GraphQL type UpdateValuePayload.
// The GraphQL type's documentation follows.
//
// UpdateValue result with filterable data and affected rows
type updateValueUpdateValueUpdateValuePayload struct {
	Affected []*updateValueUpdateValueUpdateValuePayloadAffectedValue `json:"affected"`
}

// GetAffected returns updateValueUpdateValueUpdateValuePayload.Affected, and is useful for accessing the field via an interface.
func (v *updateValueUpdateValueUpdateValuePayload) GetAffected() []*updateValueUpdateValueUpdateValuePayloadAffectedValue {
	return v.Affected
}

// updateValueUpdateValueUpdateValuePayloadAffectedValue includes the requested fields of the GraphQL type Value.
type updateValueUpdateValueUpdateValuePayloadAffectedValue struct {
	Id string `json:"id"`
}

// GetId returns updateValueUpdateValueUpdateValuePayloadAffectedValue.Id, and is useful for accessing the field via an interface.
func (v *updateValueUpdateValueUpdateValuePayloadAffectedValue) GetId() string { return v.Id }

// updateVaultResponse is returned by updateVault on success.
type updateVaultResponse struct {
	// update Vault filtered by selection and update all matched values
	UpdateVault *updateVaultUpdateVaultUpdateVaultPayload `json:"updateVault"`
}

// GetUpdateVault returns updateVaultResponse.UpdateVault, and is useful for accessing the field via an interface.
func (v *updateVaultResponse) GetUpdateVault() *updateVaultUpdateVaultUpdateVaultPayload {
	return v.UpdateVault
}

// updateVaultUpdateVaultUpdateVaultPayload includes the requested fields of the GraphQL type UpdateVaultPayload.
// The GraphQL type's documentation follows.
//
// UpdateVault result with filterable data and affected rows
type updateVaultUpdateVaultUpdateVaultPayload struct {
	Affected []*updateVaultUpdateVaultUpdateVaultPayloadAffectedVault `json:"affected"`
}

// GetAffected returns updateVaultUpdateVaultUpdateVaultPayload.Affected, and is useful for accessing the field via an interface.
func (v *updateVaultUpdateVaultUpdateVaultPayload) GetAffected() []*updateVaultUpdateVaultUpdateVaultPayloadAffectedVault {
	return v.Affected
}

// updateVaultUpdateVaultUpdateVaultPayloadAffectedVault includes the requested fields of the GraphQL type Vault.
type updateVaultUpdateVaultUpdateVaultPayloadAffectedVault struct {
	Id        string     `json:"id"`
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// GetId returns updateVaultUpdateVaultUpdateVaultPayloadAffectedVault.Id, and is useful for accessing the field via an interface.
func (v *updateVaultUpdateVaultUpdateVaultPayloadAffectedVault) GetId() string { return v.Id }

// GetName returns updateVaultUpdateVaultUpdateVaultPayloadAffectedVault.Name, and is useful for accessing the field via an interface.
func (v *updateVaultUpdateVaultUpdateVaultPayloadAffectedVault) GetName() string { return v.Name }

// GetUpdatedAt returns updateVaultUpdateVaultUpdateVaultPayloadAffectedVault.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateVaultUpdateVaultUpdateVaultPayloadAffectedVault) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// The query or mutation executed by addIdentity.
const addIdentity_Operation = `
mutation addIdentity ($name: String!, $publicKey: Base64PublicPem!, $creatorVerification: String!) {
	addIdentity(input: {name:$name,publicKey:$publicKey,creatorVerification:$creatorVerification,rights:[]}) {
		affected {
			id
		}
	}
}
`

func addIdentity(
	ctx context.Context,
	client graphql.Client,
	name string,
	publicKey helper.Base64PublicPem,
	creatorVerification string,
) (*addIdentityResponse, error) {
	req := &graphql.Request{
		OpName: "addIdentity",
		Query:  addIdentity_Operation,
		Variables: &__addIdentityInput{
			Name:                name,
			PublicKey:           publicKey,
			CreatorVerification: creatorVerification,
		},
	}
	var err error

	var data addIdentityResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by addIdentityValue.
const addIdentityValue_Operation = `
mutation addIdentityValue ($input: [IdentityValueInput!]!) {
	addIdentityValue(input: $input) {
		affected {
			id
		}
	}
}
`

func addIdentityValue(
	ctx context.Context,
	client graphql.Client,
	input []*IdentityValueInput,
) (*addIdentityValueResponse, error) {
	req := &graphql.Request{
		OpName: "addIdentityValue",
		Query:  addIdentityValue_Operation,
		Variables: &__addIdentityValueInput{
			Input: input,
		},
	}
	var err error

	var data addIdentityValueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by addRight.
const addRight_Operation = `
mutation addRight ($input: [RightInput!]!) {
	addRight(input: $input) {
		affected {
			id
		}
	}
}
`

func addRight(
	ctx context.Context,
	client graphql.Client,
	input []*RightInput,
) (*addRightResponse, error) {
	req := &graphql.Request{
		OpName: "addRight",
		Query:  addRight_Operation,
		Variables: &__addRightInput{
			Input: input,
		},
	}
	var err error

	var data addRightResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by addValue.
const addValue_Operation = `
mutation addValue ($name: String!, $valueType: ValueType!) {
	addValue(input: {name:$name,type:$valueType}) {
		affected {
			id
		}
	}
}
`

func addValue(
	ctx context.Context,
	client graphql.Client,
	name string,
	valueType ValueType,
) (*addValueResponse, error) {
	req := &graphql.Request{
		OpName: "addValue",
		Query:  addValue_Operation,
		Variables: &__addValueInput{
			Name:      name,
			ValueType: valueType,
		},
	}
	var err error

	var data addValueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by allIdentities.
const allIdentities_Operation = `
query allIdentities {
	queryIdentity {
		data {
			name
			rights {
				target
				right
				rightValuePattern
			}
		}
	}
}
`

func allIdentities(
	ctx context.Context,
	client graphql.Client,
) (*allIdentitiesResponse, error) {
	req := &graphql.Request{
		OpName: "allIdentities",
		Query:  allIdentities_Operation,
	}
	var err error

	var data allIdentitiesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by allRelatedValues.
const allRelatedValues_Operation = `
query allRelatedValues ($identity: String!) {
	allRelatedValues(identityId: $identity) {
		id
		name
	}
}
`

func allRelatedValues(
	ctx context.Context,
	client graphql.Client,
	identity string,
) (*allRelatedValuesResponse, error) {
	req := &graphql.Request{
		OpName: "allRelatedValues",
		Query:  allRelatedValues_Operation,
		Variables: &__allRelatedValuesInput{
			Identity: identity,
		},
	}
	var err error

	var data allRelatedValuesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by allRelatedValuesWithIdentityValues.
const allRelatedValuesWithIdentityValues_Operation = `
query allRelatedValuesWithIdentityValues ($identity: String!) {
	allRelatedValues(identityId: $identity) {
		id
		name
		value {
			id
			identityID
		}
	}
}
`

func allRelatedValuesWithIdentityValues(
	ctx context.Context,
	client graphql.Client,
	identity string,
) (*allRelatedValuesWithIdentityValuesResponse, error) {
	req := &graphql.Request{
		OpName: "allRelatedValuesWithIdentityValues",
		Query:  allRelatedValuesWithIdentityValues_Operation,
		Variables: &__allRelatedValuesWithIdentityValuesInput{
			Identity: identity,
		},
	}
	var err error

	var data allRelatedValuesWithIdentityValuesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createNewVault.
const createNewVault_Operation = `
mutation createNewVault ($name: String!, $operatorPublicKey: Base64PublicPem!, $token: String!) {
	createVault(name: $name, operatorPublicKey: $operatorPublicKey, token: $token)
}
`

func createNewVault(
	ctx context.Context,
	client graphql.Client,
	name string,
	operatorPublicKey helper.Base64PublicPem,
	token string,
) (*createNewVaultResponse, error) {
	req := &graphql.Request{
		OpName: "createNewVault",
		Query:  createNewVault_Operation,
		Variables: &__createNewVaultInput{
			Name:              name,
			OperatorPublicKey: operatorPublicKey,
			Token:             token,
		},
	}
	var err error

	var data createNewVaultResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteAllRightsFromIdentity.
const deleteAllRightsFromIdentity_Operation = `
mutation deleteAllRightsFromIdentity ($identityId: String!) {
	deleteRight(filter: {identityID:{eq:$identityId}}) {
		count
	}
}
`

func deleteAllRightsFromIdentity(
	ctx context.Context,
	client graphql.Client,
	identityId string,
) (*deleteAllRightsFromIdentityResponse, error) {
	req := &graphql.Request{
		OpName: "deleteAllRightsFromIdentity",
		Query:  deleteAllRightsFromIdentity_Operation,
		Variables: &__deleteAllRightsFromIdentityInput{
			IdentityId: identityId,
		},
	}
	var err error

	var data deleteAllRightsFromIdentityResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteIdentity.
const deleteIdentity_Operation = `
mutation deleteIdentity ($identityid: String!) {
	deleteIdentity(filter: {id:{eq:$identityid}}) {
		count
	}
}
`

func deleteIdentity(
	ctx context.Context,
	client graphql.Client,
	identityid string,
) (*deleteIdentityResponse, error) {
	req := &graphql.Request{
		OpName: "deleteIdentity",
		Query:  deleteIdentity_Operation,
		Variables: &__deleteIdentityInput{
			Identityid: identityid,
		},
	}
	var err error

	var data deleteIdentityResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteIdentityValue.
const deleteIdentityValue_Operation = `
mutation deleteIdentityValue ($id: ID!) {
	deleteIdentityValue(filter: {id:{eq:$id}}) {
		count
	}
}
`

func deleteIdentityValue(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteIdentityValueResponse, error) {
	req := &graphql.Request{
		OpName: "deleteIdentityValue",
		Query:  deleteIdentityValue_Operation,
		Variables: &__deleteIdentityValueInput{
			Id: id,
		},
	}
	var err error

	var data deleteIdentityValueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteRight.
const deleteRight_Operation = `
mutation deleteRight ($rightId: ID!, $identityId: String!) {
	deleteRight(filter: {id:{eq:$rightId},identityID:{eq:$identityId}}) {
		count
	}
}
`

func deleteRight(
	ctx context.Context,
	client graphql.Client,
	rightId string,
	identityId string,
) (*deleteRightResponse, error) {
	req := &graphql.Request{
		OpName: "deleteRight",
		Query:  deleteRight_Operation,
		Variables: &__deleteRightInput{
			RightId:    rightId,
			IdentityId: identityId,
		},
	}
	var err error

	var data deleteRightResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteValue.
const deleteValue_Operation = `
mutation deleteValue ($id: String!) {
	deleteValue(filter: {id:{eq:$id}}) {
		count
	}
}
`

func deleteValue(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteValueResponse, error) {
	req := &graphql.Request{
		OpName: "deleteValue",
		Query:  deleteValue_Operation,
		Variables: &__deleteValueInput{
			Id: id,
		},
	}
	var err error

	var data deleteValueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteVault.
const deleteVault_Operation = `
mutation deleteVault ($id: String!) {
	deleteVault(filter: {id:{eq:$id}}) {
		count
	}
}
`

func deleteVault(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteVaultResponse, error) {
	req := &graphql.Request{
		OpName: "deleteVault",
		Query:  deleteVault_Operation,
		Variables: &__deleteVaultInput{
			Id: id,
		},
	}
	var err error

	var data deleteVaultResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getIdentity.
const getIdentity_Operation = `
query getIdentity ($id: String!) {
	getIdentity(id: $id) {
		id
		name
		publicKey
		vaultID
		createdAt
		updatedAt
		rights {
			id
			right
			target
			rightValuePattern
		}
	}
}
`

func getIdentity(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getIdentityResponse, error) {
	req := &graphql.Request{
		OpName: "getIdentity",
		Query:  getIdentity_Operation,
		Variables: &__getIdentityInput{
			Id: id,
		},
	}
	var err error

	var data getIdentityResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getRelatedIdenties.
const getRelatedIdenties_Operation = `
query getRelatedIdenties ($value: String!) {
	identitiesWithValueAccess(forValue: $value) {
		id
		name
		publicKey
		creatorVerification
		isOperator
	}
}
`

func getRelatedIdenties(
	ctx context.Context,
	client graphql.Client,
	value string,
) (*getRelatedIdentiesResponse, error) {
	req := &graphql.Request{
		OpName: "getRelatedIdenties",
		Query:  getRelatedIdenties_Operation,
		Variables: &__getRelatedIdentiesInput{
			Value: value,
		},
	}
	var err error

	var data getRelatedIdentiesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getValue.
const getValue_Operation = `
query getValue ($id: String!) {
	getValue(id: $id) {
		name
		type
		id
		createdAt
		updatedAt
		value {
			id
			identityID
			identity {
				publicKey
			}
			passframe
		}
	}
}
`

func getValue(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getValueResponse, error) {
	req := &graphql.Request{
		OpName: "getValue",
		Query:  getValue_Operation,
		Variables: &__getValueInput{
			Id: id,
		},
	}
	var err error

	var data getValueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getValueByName.
const getValueByName_Operation = `
query getValueByName ($name: String!) {
	queryValue(filter: {name:{eq:$name}}) {
		data {
			name
			type
			id
			createdAt
			updatedAt
			value {
				id
				identityID
				identity {
					publicKey
				}
				passframe
			}
		}
	}
}
`

func getValueByName(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*getValueByNameResponse, error) {
	req := &graphql.Request{
		OpName: "getValueByName",
		Query:  getValueByName_Operation,
		Variables: &__getValueByNameInput{
			Name: name,
		},
	}
	var err error

	var data getValueByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getVault.
const getVault_Operation = `
query getVault ($id: String!) {
	getVault(id: $id) {
		id
		name
		updatedAt
	}
}
`

func getVault(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getVaultResponse, error) {
	req := &graphql.Request{
		OpName: "getVault",
		Query:  getVault_Operation,
		Variables: &__getVaultInput{
			Id: id,
		},
	}
	var err error

	var data getVaultResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by removeIdentityValue.
const removeIdentityValue_Operation = `
mutation removeIdentityValue ($id: ID) {
	deleteIdentityValue(filter: {id:{eq:$id}}) {
		count
	}
}
`

func removeIdentityValue(
	ctx context.Context,
	client graphql.Client,
	id *string,
) (*removeIdentityValueResponse, error) {
	req := &graphql.Request{
		OpName: "removeIdentityValue",
		Query:  removeIdentityValue_Operation,
		Variables: &__removeIdentityValueInput{
			Id: id,
		},
	}
	var err error

	var data removeIdentityValueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateIdentity.
const updateIdentity_Operation = `
mutation updateIdentity ($id: String!, $name: String!) {
	updateIdentity(input: {set:{name:$name},filter:{id:{eq:$id}}}) {
		affected {
			id
			publicKey
		}
	}
}
`

func updateIdentity(
	ctx context.Context,
	client graphql.Client,
	id string,
	name string,
) (*updateIdentityResponse, error) {
	req := &graphql.Request{
		OpName: "updateIdentity",
		Query:  updateIdentity_Operation,
		Variables: &__updateIdentityInput{
			Id:   id,
			Name: name,
		},
	}
	var err error

	var data updateIdentityResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateIdentityValue.
const updateIdentityValue_Operation = `
mutation updateIdentityValue ($id: ID!, $input: IdentityValuePatch!) {
	updateIdentityValue(input: {filter:{id:{eq:$id}},set:$input}) {
		affected {
			id
		}
	}
}
`

func updateIdentityValue(
	ctx context.Context,
	client graphql.Client,
	id string,
	input *IdentityValuePatch,
) (*updateIdentityValueResponse, error) {
	req := &graphql.Request{
		OpName: "updateIdentityValue",
		Query:  updateIdentityValue_Operation,
		Variables: &__updateIdentityValueInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateIdentityValueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateValue.
const updateValue_Operation = `
mutation updateValue ($id: String!, $key: String!, $valueType: ValueType!) {
	updateValue(input: {filter:{id:{eq:$id}},set:{type:$valueType,name:$key}}) {
		affected {
			id
		}
	}
}
`

func updateValue(
	ctx context.Context,
	client graphql.Client,
	id string,
	key string,
	valueType ValueType,
) (*updateValueResponse, error) {
	req := &graphql.Request{
		OpName: "updateValue",
		Query:  updateValue_Operation,
		Variables: &__updateValueInput{
			Id:        id,
			Key:       key,
			ValueType: valueType,
		},
	}
	var err error

	var data updateValueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateVault.
const updateVault_Operation = `
mutation updateVault ($name: String!) {
	updateVault(input: {filter:{},set:{name:$name}}) {
		affected {
			id
			name
			updatedAt
		}
	}
}
`

func updateVault(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*updateVaultResponse, error) {
	req := &graphql.Request{
		OpName: "updateVault",
		Query:  updateVault_Operation,
		Variables: &__updateVaultInput{
			Name: name,
		},
	}
	var err error

	var data updateVaultResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
