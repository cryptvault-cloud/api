directive @auth(target: RightTarget!, right: [Directions!]!, valueMatchRegex: String!) on FIELD_DEFINITION

directive @admin on FIELD_DEFINITION

directive @userAuth on FIELD_DEFINITION

"""AddCostValue result with filterable data and affected rows"""
type AddCostValuePayload {
  costValue(filter: CostValueFiltersInput, order: CostValueOrder, first: Int, offset: Int, group: [CostValueGroup!]): CostValueQueryResult!
  affected: [CostValue!]!
}

"""AddIdentity result with filterable data and affected rows"""
type AddIdentityPayload {
  identity(filter: IdentityFiltersInput, order: IdentityOrder, first: Int, offset: Int, group: [IdentityGroup!]): IdentityQueryResult!
  affected: [Identity!]!
}

"""AddIdentityValue result with filterable data and affected rows"""
type AddIdentityValuePayload {
  identityValue(filter: IdentityValueFiltersInput, order: IdentityValueOrder, first: Int, offset: Int, group: [IdentityValueGroup!]): IdentityValueQueryResult!
  affected: [IdentityValue!]!
}

"""AddRight result with filterable data and affected rows"""
type AddRightPayload {
  right(filter: RightFiltersInput, order: RightOrder, first: Int, offset: Int, group: [RightGroup!]): RightQueryResult!
  affected: [Right!]!
}

"""AddTokenInfo result with filterable data and affected rows"""
type AddTokenInfoPayload {
  tokenInfo(filter: TokenInfoFiltersInput, order: TokenInfoOrder, first: Int, offset: Int, group: [TokenInfoGroup!]): TokenInfoQueryResult!
  affected: [TokenInfo!]!
}

"""AddToken result with filterable data and affected rows"""
type AddTokenPayload {
  token(filter: TokenFiltersInput, order: TokenOrder, first: Int, offset: Int, group: [TokenGroup!]): TokenQueryResult!
  affected: [Token!]!
}

"""AddValue result with filterable data and affected rows"""
type AddValuePayload {
  value(filter: ValueFiltersInput, order: ValueOrder, first: Int, offset: Int, group: [ValueGroup!]): ValueQueryResult!
  affected: [Value!]!
}

"""AddVault result with filterable data and affected rows"""
type AddVaultPayload {
  vault(filter: VaultFiltersInput, order: VaultOrder, first: Int, offset: Int, group: [VaultGroup!]): VaultQueryResult!
  affected: [Vault!]!
}

scalar Base64PublicPem

"""Boolean Filter simple datatypes"""
input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  is: Boolean
  null: Boolean
  notNull: Boolean
}

type CostValue {
  value_hash: String!
  tokenID: String!
  token: Token!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

"""
Filter input selection for CostValue
    Can be used f.e.: by queryCostValue
"""
input CostValueFiltersInput {
  value_hash: StringFilterInput
  tokenID: StringFilterInput
  token: TokenFiltersInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  deletedAt: TimeFilterInput
  and: [CostValueFiltersInput]
  or: [CostValueFiltersInput]
  not: CostValueFiltersInput
}

"""
Groupable data for  CostValue
    Can be used f.e.: by queryCostValue
"""
enum CostValueGroup {
  value_hash
  tokenID
  createdAt
  updatedAt
  deletedAt
}

"""CostValue Input value to add new CostValue"""
input CostValueInput {
  value_hash: String!
  tokenID: String!
}

"""Order CostValue by asc or desc"""
input CostValueOrder {
  asc: CostValueOrderable
  desc: CostValueOrderable
}

"""
for CostValue a enum of all orderable entities
    can be used f.e.: queryCostValue
"""
enum CostValueOrderable {
  value_hash
  tokenID
}

"""
CostValue Patch value all values are optional to update CostValue entities
"""
input CostValuePatch {
  value_hash: String
  tokenID: String
}

"""CostValue result"""
type CostValueQueryResult {
  data: [CostValue!]!
  count: Int!
  totalCount: Int!
}

enum CostValuesType {
  ADD
  DELETE
}

enum Currency {
  Euro
}

"""
DeleteCostValue result with filterable data and count of affected entries
"""
type DeleteCostValuePayload {
  costValue(filter: CostValueFiltersInput, order: CostValueOrder, first: Int, offset: Int, group: [CostValueGroup!]): CostValueQueryResult!

  """Count of deleted CostValue entities"""
  count: Int!
  msg: String
}

"""
DeleteIdentity result with filterable data and count of affected entries
"""
type DeleteIdentityPayload {
  identity(filter: IdentityFiltersInput, order: IdentityOrder, first: Int, offset: Int, group: [IdentityGroup!]): IdentityQueryResult!

  """Count of deleted Identity entities"""
  count: Int!
  msg: String
}

"""
DeleteIdentityValue result with filterable data and count of affected entries
"""
type DeleteIdentityValuePayload {
  identityValue(filter: IdentityValueFiltersInput, order: IdentityValueOrder, first: Int, offset: Int, group: [IdentityValueGroup!]): IdentityValueQueryResult!

  """Count of deleted IdentityValue entities"""
  count: Int!
  msg: String
}

"""DeleteRight result with filterable data and count of affected entries"""
type DeleteRightPayload {
  right(filter: RightFiltersInput, order: RightOrder, first: Int, offset: Int, group: [RightGroup!]): RightQueryResult!

  """Count of deleted Right entities"""
  count: Int!
  msg: String
}

"""
DeleteTokenInfo result with filterable data and count of affected entries
"""
type DeleteTokenInfoPayload {
  tokenInfo(filter: TokenInfoFiltersInput, order: TokenInfoOrder, first: Int, offset: Int, group: [TokenInfoGroup!]): TokenInfoQueryResult!

  """Count of deleted TokenInfo entities"""
  count: Int!
  msg: String
}

"""DeleteToken result with filterable data and count of affected entries"""
type DeleteTokenPayload {
  token(filter: TokenFiltersInput, order: TokenOrder, first: Int, offset: Int, group: [TokenGroup!]): TokenQueryResult!

  """Count of deleted Token entities"""
  count: Int!
  msg: String
}

"""DeleteValue result with filterable data and count of affected entries"""
type DeleteValuePayload {
  value(filter: ValueFiltersInput, order: ValueOrder, first: Int, offset: Int, group: [ValueGroup!]): ValueQueryResult!

  """Count of deleted Value entities"""
  count: Int!
  msg: String
}

"""DeleteVault result with filterable data and count of affected entries"""
type DeleteVaultPayload {
  vault(filter: VaultFiltersInput, order: VaultOrder, first: Int, offset: Int, group: [VaultGroup!]): VaultQueryResult!

  """Count of deleted Vault entities"""
  count: Int!
  msg: String
}

enum Directions {
  write
  read
  delete
}

"""Filter between start and end (start > value < end)"""
input FloatFilterBetween {
  start: Float!
  end: Float!
}

"""Float Filter simple datatypes"""
input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: FloatFilterBetween
}

type Identity {
  id: String!
  name: String
  publicKey: Base64PublicPem!
  rights: [Right!]!
  vaultID: String!
  vault: Vault!
  creatorVerification: String!
  isOperator: Boolean!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

"""
Filter input selection for Identity
    Can be used f.e.: by queryIdentity
"""
input IdentityFiltersInput {
  id: StringFilterInput
  name: StringFilterInput
  rights: RightFiltersInput
  vaultID: StringFilterInput
  vault: VaultFiltersInput
  creatorVerification: StringFilterInput
  isOperator: BooleanFilterInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  deletedAt: TimeFilterInput
  and: [IdentityFiltersInput]
  or: [IdentityFiltersInput]
  not: IdentityFiltersInput
}

"""
Groupable data for  Identity
    Can be used f.e.: by queryIdentity
"""
enum IdentityGroup {
  id
  name
  vaultID
  creatorVerification
  isOperator
  createdAt
  updatedAt
  deletedAt
}

"""Identity Input value to add new Identity"""
input IdentityInput {
  name: String
  publicKey: Base64PublicPem!
  rights: [RightInput!]!
  creatorVerification: String!
}

"""Order Identity by asc or desc"""
input IdentityOrder {
  asc: IdentityOrderable
  desc: IdentityOrderable
}

"""
for Identity a enum of all orderable entities
    can be used f.e.: queryIdentity
"""
enum IdentityOrderable {
  id
  name
  vaultID
  creatorVerification
  isOperator
}

"""
Identity Patch value all values are optional to update Identity entities
"""
input IdentityPatch {
  name: String
  publicKey: Base64PublicPem
  rights: [RightPatch!]
  creatorVerification: String
}

"""Identity result"""
type IdentityQueryResult {
  data: [Identity!]!
  count: Int!
  totalCount: Int!
}

type IdentityValue {
  id: ID!
  valueID: String!
  value: Value!
  identityID: String!
  identity: Identity!
  passframe: String!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

"""
Filter input selection for IdentityValue
    Can be used f.e.: by queryIdentityValue
"""
input IdentityValueFiltersInput {
  id: IDFilterInput
  valueID: StringFilterInput
  value: ValueFiltersInput
  identityID: StringFilterInput
  identity: IdentityFiltersInput
  passframe: StringFilterInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  deletedAt: TimeFilterInput
  and: [IdentityValueFiltersInput]
  or: [IdentityValueFiltersInput]
  not: IdentityValueFiltersInput
}

"""
Groupable data for  IdentityValue
    Can be used f.e.: by queryIdentityValue
"""
enum IdentityValueGroup {
  id
  valueID
  identityID
  passframe
  createdAt
  updatedAt
  deletedAt
}

"""IdentityValue Input value to add new IdentityValue"""
input IdentityValueInput {
  valueID: String!
  identityID: String!
  passframe: String!
}

"""Order IdentityValue by asc or desc"""
input IdentityValueOrder {
  asc: IdentityValueOrderable
  desc: IdentityValueOrderable
}

"""
for IdentityValue a enum of all orderable entities
    can be used f.e.: queryIdentityValue
"""
enum IdentityValueOrderable {
  id
  valueID
  identityID
  passframe
}

"""
IdentityValue Patch value all values are optional to update IdentityValue entities
"""
input IdentityValuePatch {
  valueID: String
  identityID: String
  passframe: String
}

"""IdentityValue result"""
type IdentityValueQueryResult {
  data: [IdentityValue!]!
  count: Int!
  totalCount: Int!
}

"""ID Filter simple datatypes"""
input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  ne: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notin: [ID]
}

"""Filter between start and end (start > value < end)"""
input IntFilterBetween {
  start: Int!
  end: Int!
}

"""Int Filter simple datatypes"""
input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: IntFilterBetween
}

type Money {
  value: Float!
  currency: String!
}

type Mutation {
  """Create a new Vault with first operator and return vault id"""
  createVault(name: String!, operatorPublicKey: Base64PublicPem!, token: String!): String!

  """Add new Identity"""
  addIdentity(input: [IdentityInput!]!): AddIdentityPayload

  """update Identity filtered by selection and update all matched values"""
  updateIdentity(input: UpdateIdentityInput!): UpdateIdentityPayload

  """delete Identity filtered by selection and delete all matched values"""
  deleteIdentity(filter: IdentityFiltersInput!): DeleteIdentityPayload

  """Add new IdentityValue"""
  addIdentityValue(input: [IdentityValueInput!]!): AddIdentityValuePayload

  """
  update IdentityValue filtered by selection and update all matched values
  """
  updateIdentityValue(input: UpdateIdentityValueInput!): UpdateIdentityValuePayload

  """
  delete IdentityValue filtered by selection and delete all matched values
  """
  deleteIdentityValue(filter: IdentityValueFiltersInput!): DeleteIdentityValuePayload

  """Add new Right"""
  addRight(input: [RightInput!]!): AddRightPayload

  """update Right filtered by selection and update all matched values"""
  updateRight(input: UpdateRightInput!): UpdateRightPayload

  """delete Right filtered by selection and delete all matched values"""
  deleteRight(filter: RightFiltersInput!): DeleteRightPayload

  """Add new TokenInfo"""
  addTokenInfo(input: [TokenInfoInput!]!): AddTokenInfoPayload

  """update TokenInfo filtered by selection and update all matched values"""
  updateTokenInfo(input: UpdateTokenInfoInput!): UpdateTokenInfoPayload

  """delete TokenInfo filtered by selection and delete all matched values"""
  deleteTokenInfo(filter: TokenInfoFiltersInput!): DeleteTokenInfoPayload

  """Add new Value"""
  addValue(input: [ValueInput!]!): AddValuePayload

  """update Value filtered by selection and update all matched values"""
  updateValue(input: UpdateValueInput!): UpdateValuePayload

  """delete Value filtered by selection and delete all matched values"""
  deleteValue(filter: ValueFiltersInput!): DeleteValuePayload

  """Add new Vault"""
  addVault(input: [VaultInput!]!): AddVaultPayload

  """update Vault filtered by selection and update all matched values"""
  updateVault(input: UpdateVaultInput!): UpdateVaultPayload

  """delete Vault filtered by selection and delete all matched values"""
  deleteVault(filter: VaultFiltersInput!): DeleteVaultPayload

  """Add new CostValue"""
  addCostValue(input: [CostValueInput!]!): AddCostValuePayload

  """update CostValue filtered by selection and update all matched values"""
  updateCostValue(input: UpdateCostValueInput!): UpdateCostValuePayload

  """delete CostValue filtered by selection and delete all matched values"""
  deleteCostValue(filter: CostValueFiltersInput!): DeleteCostValuePayload

  """Add new Token"""
  addToken(input: [TokenInput!]!): AddTokenPayload

  """update Token filtered by selection and update all matched values"""
  updateToken(input: UpdateTokenInput!): UpdateTokenPayload

  """delete Token filtered by selection and delete all matched values"""
  deleteToken(filter: TokenFiltersInput!): DeleteTokenPayload
}

type Query {
  identitiesWithValueAccess(forValue: String!): [Identity!]!
  allRelatedValues(identityId: String!): [Value!]!
  userData: UserData!

  """return one Identity selected by PrimaryKey(s)"""
  getIdentity(id: String!): Identity

  """
  return a list of  Identity filterable, pageination, orderbale, groupable ...
  """
  queryIdentity(filter: IdentityFiltersInput, order: IdentityOrder, first: Int, offset: Int, group: [IdentityGroup!]): IdentityQueryResult

  """return one IdentityValue selected by PrimaryKey(s)"""
  getIdentityValue(id: ID!): IdentityValue

  """
  return a list of  IdentityValue filterable, pageination, orderbale, groupable ...
  """
  queryIdentityValue(filter: IdentityValueFiltersInput, order: IdentityValueOrder, first: Int, offset: Int, group: [IdentityValueGroup!]): IdentityValueQueryResult

  """return one Right selected by PrimaryKey(s)"""
  getRight(id: ID!): Right

  """
  return a list of  Right filterable, pageination, orderbale, groupable ...
  """
  queryRight(filter: RightFiltersInput, order: RightOrder, first: Int, offset: Int, group: [RightGroup!]): RightQueryResult

  """return one TokenInfo selected by PrimaryKey(s)"""
  getTokenInfo(id: String!): TokenInfo

  """
  return a list of  TokenInfo filterable, pageination, orderbale, groupable ...
  """
  queryTokenInfo(filter: TokenInfoFiltersInput, order: TokenInfoOrder, first: Int, offset: Int, group: [TokenInfoGroup!]): TokenInfoQueryResult

  """return one Value selected by PrimaryKey(s)"""
  getValue(id: String!): Value

  """
  return a list of  Value filterable, pageination, orderbale, groupable ...
  """
  queryValue(filter: ValueFiltersInput, order: ValueOrder, first: Int, offset: Int, group: [ValueGroup!]): ValueQueryResult

  """return one Vault selected by PrimaryKey(s)"""
  getVault(id: String!): Vault

  """
  return a list of  Vault filterable, pageination, orderbale, groupable ...
  """
  queryVault(filter: VaultFiltersInput, order: VaultOrder, first: Int, offset: Int, group: [VaultGroup!]): VaultQueryResult
  startBillJob: Boolean!
  paymentPortalLink: String!

  """return one CostValue selected by PrimaryKey(s)"""
  getCostValue(value_hash: String!): CostValue

  """
  return a list of  CostValue filterable, pageination, orderbale, groupable ...
  """
  queryCostValue(filter: CostValueFiltersInput, order: CostValueOrder, first: Int, offset: Int, group: [CostValueGroup!]): CostValueQueryResult

  """return one Token selected by PrimaryKey(s)"""
  getToken(id: String!): Token

  """
  return a list of  Token filterable, pageination, orderbale, groupable ...
  """
  queryToken(filter: TokenFiltersInput, order: TokenOrder, first: Int, offset: Int, group: [TokenGroup!]): TokenQueryResult
}

type Right {
  id: ID!
  target: RightTarget!
  right: Directions!
  rightValuePattern: String!
  identityID: String!
  identity: Identity
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

"""
Filter input selection for Right
    Can be used f.e.: by queryRight
"""
input RightFiltersInput {
  id: IDFilterInput
  target: StringFilterInput
  right: StringFilterInput
  rightValuePattern: StringFilterInput
  identityID: StringFilterInput
  identity: IdentityFiltersInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  deletedAt: TimeFilterInput
  and: [RightFiltersInput]
  or: [RightFiltersInput]
  not: RightFiltersInput
}

"""
Groupable data for  Right
    Can be used f.e.: by queryRight
"""
enum RightGroup {
  id
  rightValuePattern
  identityID
  createdAt
  updatedAt
  deletedAt
}

"""Right Input value to add new Right"""
input RightInput {
  target: RightTarget!
  right: Directions!
  rightValuePattern: String!
  identityID: String!
}

"""Order Right by asc or desc"""
input RightOrder {
  asc: RightOrderable
  desc: RightOrderable
}

"""
for Right a enum of all orderable entities
    can be used f.e.: queryRight
"""
enum RightOrderable {
  id
  rightValuePattern
  identityID
}

"""Right Patch value all values are optional to update Right entities"""
input RightPatch {
  target: RightTarget
  right: Directions
  rightValuePattern: String
  identityID: String
}

"""Right result"""
type RightQueryResult {
  data: [Right!]!
  count: Int!
  totalCount: Int!
}

enum RightTarget {
  values
  system
  identities
}

"""String Filter simple datatypes"""
input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
}

scalar Time

"""Filter between start and end (start > value < end)"""
input TimeFilterBetween {
  start: Time!
  end: Time!
}

"""Time Filter simple datatypes"""
input TimeFilterInput {
  and: [Time]
  or: [Time]
  not: TimeFilterInput
  eq: Time
  ne: Time
  gt: Time
  gte: Time
  lt: Time
  lte: Time
  null: Boolean
  notNull: Boolean
  in: [Time]
  notIn: [Time]
  between: TimeFilterBetween
}

type Token {
  id: String!
  userId: String!
  vaultId: String!
  subscriptionPriceId: String!
  subscriptionId: String!
  stripeCustomerId: String!
  createdAt: Time
  updatedAt: Time
}

type TokenData {
  id: String!
  costEncryptionCount: Int
  currentEncryptionCost: Money
  total: Money
  periodStart: Time
  periodEnd: Time
  vaultName: String
  usedEncryption: Int
  used: Boolean!
  encryptionLimit: Int!
}

"""
Filter input selection for Token
    Can be used f.e.: by queryToken
"""
input TokenFiltersInput {
  id: StringFilterInput
  userId: StringFilterInput
  vaultId: StringFilterInput
  subscriptionPriceId: StringFilterInput
  subscriptionId: StringFilterInput
  stripeCustomerId: StringFilterInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  and: [TokenFiltersInput]
  or: [TokenFiltersInput]
  not: TokenFiltersInput
}

"""
Groupable data for  Token
    Can be used f.e.: by queryToken
"""
enum TokenGroup {
  id
  userId
  vaultId
  subscriptionPriceId
  subscriptionId
  stripeCustomerId
  createdAt
  updatedAt
}

type TokenInfo {
  id: String!
  userId: String!
  used: Boolean!
  encryptionLimit: Int!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

"""
Filter input selection for TokenInfo
    Can be used f.e.: by queryTokenInfo
"""
input TokenInfoFiltersInput {
  id: StringFilterInput
  userId: StringFilterInput
  used: BooleanFilterInput
  encryptionLimit: IntFilterInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  deletedAt: TimeFilterInput
  and: [TokenInfoFiltersInput]
  or: [TokenInfoFiltersInput]
  not: TokenInfoFiltersInput
}

"""
Groupable data for  TokenInfo
    Can be used f.e.: by queryTokenInfo
"""
enum TokenInfoGroup {
  id
  userId
  used
  encryptionLimit
  createdAt
  updatedAt
  deletedAt
}

"""TokenInfo Input value to add new TokenInfo"""
input TokenInfoInput {
  encryptionLimit: Int!
}

"""Order TokenInfo by asc or desc"""
input TokenInfoOrder {
  asc: TokenInfoOrderable
  desc: TokenInfoOrderable
}

"""
for TokenInfo a enum of all orderable entities
    can be used f.e.: queryTokenInfo
"""
enum TokenInfoOrderable {
  id
  userId
  used
  encryptionLimit
}

"""
TokenInfo Patch value all values are optional to update TokenInfo entities
"""
input TokenInfoPatch {
  encryptionLimit: Int
}

"""TokenInfo result"""
type TokenInfoQueryResult {
  data: [TokenInfo!]!
  count: Int!
  totalCount: Int!
}

"""Token Input value to add new Token"""
input TokenInput {
  userId: String!
  vaultId: String!
  subscriptionPriceId: String!
  subscriptionId: String!
  stripeCustomerId: String!
}

"""Order Token by asc or desc"""
input TokenOrder {
  asc: TokenOrderable
  desc: TokenOrderable
}

"""
for Token a enum of all orderable entities
    can be used f.e.: queryToken
"""
enum TokenOrderable {
  id
  userId
  vaultId
  subscriptionPriceId
  subscriptionId
  stripeCustomerId
}

"""Token Patch value all values are optional to update Token entities"""
input TokenPatch {
  userId: String
  vaultId: String
  subscriptionPriceId: String
  subscriptionId: String
  stripeCustomerId: String
}

"""Token result"""
type TokenQueryResult {
  data: [Token!]!
  count: Int!
  totalCount: Int!
}

"""
Update rules for CostValue multiupdates simple possible by global filtervalue
"""
input UpdateCostValueInput {
  filter: CostValueFiltersInput!
  set: CostValuePatch!
}

"""UpdateCostValue result with filterable data and affected rows"""
type UpdateCostValuePayload {
  costValue(filter: CostValueFiltersInput, order: CostValueOrder, first: Int, offset: Int, group: [CostValueGroup!]): CostValueQueryResult!

  """Count of affected updates"""
  count: Int!
  affected: [CostValue!]!
}

"""
Update rules for Identity multiupdates simple possible by global filtervalue
"""
input UpdateIdentityInput {
  filter: IdentityFiltersInput!
  set: IdentityPatch!
}

"""UpdateIdentity result with filterable data and affected rows"""
type UpdateIdentityPayload {
  identity(filter: IdentityFiltersInput, order: IdentityOrder, first: Int, offset: Int, group: [IdentityGroup!]): IdentityQueryResult!

  """Count of affected updates"""
  count: Int!
  affected: [Identity!]!
}

"""
Update rules for IdentityValue multiupdates simple possible by global filtervalue
"""
input UpdateIdentityValueInput {
  filter: IdentityValueFiltersInput!
  set: IdentityValuePatch!
}

"""UpdateIdentityValue result with filterable data and affected rows"""
type UpdateIdentityValuePayload {
  identityValue(filter: IdentityValueFiltersInput, order: IdentityValueOrder, first: Int, offset: Int, group: [IdentityValueGroup!]): IdentityValueQueryResult!

  """Count of affected updates"""
  count: Int!
  affected: [IdentityValue!]!
}

"""
Update rules for Right multiupdates simple possible by global filtervalue
"""
input UpdateRightInput {
  filter: RightFiltersInput!
  set: RightPatch!
}

"""UpdateRight result with filterable data and affected rows"""
type UpdateRightPayload {
  right(filter: RightFiltersInput, order: RightOrder, first: Int, offset: Int, group: [RightGroup!]): RightQueryResult!

  """Count of affected updates"""
  count: Int!
  affected: [Right!]!
}

"""
Update rules for TokenInfo multiupdates simple possible by global filtervalue
"""
input UpdateTokenInfoInput {
  filter: TokenInfoFiltersInput!
  set: TokenInfoPatch!
}

"""UpdateTokenInfo result with filterable data and affected rows"""
type UpdateTokenInfoPayload {
  tokenInfo(filter: TokenInfoFiltersInput, order: TokenInfoOrder, first: Int, offset: Int, group: [TokenInfoGroup!]): TokenInfoQueryResult!

  """Count of affected updates"""
  count: Int!
  affected: [TokenInfo!]!
}

"""
Update rules for Token multiupdates simple possible by global filtervalue
"""
input UpdateTokenInput {
  filter: TokenFiltersInput!
  set: TokenPatch!
}

"""UpdateToken result with filterable data and affected rows"""
type UpdateTokenPayload {
  token(filter: TokenFiltersInput, order: TokenOrder, first: Int, offset: Int, group: [TokenGroup!]): TokenQueryResult!

  """Count of affected updates"""
  count: Int!
  affected: [Token!]!
}

"""
Update rules for Value multiupdates simple possible by global filtervalue
"""
input UpdateValueInput {
  filter: ValueFiltersInput!
  set: ValuePatch!
}

"""UpdateValue result with filterable data and affected rows"""
type UpdateValuePayload {
  value(filter: ValueFiltersInput, order: ValueOrder, first: Int, offset: Int, group: [ValueGroup!]): ValueQueryResult!

  """Count of affected updates"""
  count: Int!
  affected: [Value!]!
}

"""
Update rules for Vault multiupdates simple possible by global filtervalue
"""
input UpdateVaultInput {
  filter: VaultFiltersInput!
  set: VaultPatch!
}

"""UpdateVault result with filterable data and affected rows"""
type UpdateVaultPayload {
  vault(filter: VaultFiltersInput, order: VaultOrder, first: Int, offset: Int, group: [VaultGroup!]): VaultQueryResult!

  """Count of affected updates"""
  count: Int!
  affected: [Vault!]!
}

type UserData {
  id: String!
  tokens: [TokenData!]!
  hasTokens: Boolean!
  balance: Money!
  hasPaymentUser: Boolean!
}

type Value {
  id: String!
  name: String!
  vaultID: String!
  vault: Vault!
  value: [IdentityValue!]!
  type: ValueType!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

"""
Filter input selection for Value
    Can be used f.e.: by queryValue
"""
input ValueFiltersInput {
  id: StringFilterInput
  name: StringFilterInput
  vaultID: StringFilterInput
  vault: VaultFiltersInput
  value: IdentityValueFiltersInput
  type: StringFilterInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  deletedAt: TimeFilterInput
  and: [ValueFiltersInput]
  or: [ValueFiltersInput]
  not: ValueFiltersInput
}

"""
Groupable data for  Value
    Can be used f.e.: by queryValue
"""
enum ValueGroup {
  id
  name
  vaultID
  createdAt
  updatedAt
  deletedAt
}

"""Value Input value to add new Value"""
input ValueInput {
  name: String!
  type: ValueType!
}

"""Order Value by asc or desc"""
input ValueOrder {
  asc: ValueOrderable
  desc: ValueOrderable
}

"""
for Value a enum of all orderable entities
    can be used f.e.: queryValue
"""
enum ValueOrderable {
  id
  name
  vaultID
}

"""Value Patch value all values are optional to update Value entities"""
input ValuePatch {
  name: String
  type: ValueType
}

"""Value result"""
type ValueQueryResult {
  data: [Value!]!
  count: Int!
  totalCount: Int!
}

enum ValueType {
  String
  JSON
}

type Vault {
  id: String!
  name: String!
  identities: [Identity!]
  tokenID: String!
  token: TokenInfo!
  values: [Value!]
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

"""
Filter input selection for Vault
    Can be used f.e.: by queryVault
"""
input VaultFiltersInput {
  id: StringFilterInput
  name: StringFilterInput
  identities: IdentityFiltersInput
  tokenID: StringFilterInput
  token: TokenInfoFiltersInput
  values: ValueFiltersInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  deletedAt: TimeFilterInput
  and: [VaultFiltersInput]
  or: [VaultFiltersInput]
  not: VaultFiltersInput
}

"""
Groupable data for  Vault
    Can be used f.e.: by queryVault
"""
enum VaultGroup {
  id
  name
  tokenID
  createdAt
  updatedAt
  deletedAt
}

"""Vault Input value to add new Vault"""
input VaultInput {
  name: String!
  identities: [IdentityInput!]
  values: [ValueInput!]
}

"""Order Vault by asc or desc"""
input VaultOrder {
  asc: VaultOrderable
  desc: VaultOrderable
}

"""
for Vault a enum of all orderable entities
    can be used f.e.: queryVault
"""
enum VaultOrderable {
  id
  name
  tokenID
}

"""Vault Patch value all values are optional to update Vault entities"""
input VaultPatch {
  name: String
  identities: [IdentityPatch!]
  values: [ValuePatch!]
}

"""Vault result"""
type VaultQueryResult {
  data: [Vault!]!
  count: Int!
  totalCount: Int!
}

